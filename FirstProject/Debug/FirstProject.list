
FirstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  4 .ARM          00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000384  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000384  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000180b  00000000  00000000  000103b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000039b  00000000  00000000  00011bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00011f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00011fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001991d  00000000  00000000  00012028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e59  00000000  00000000  0002b945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea66  00000000  00000000  0002c79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bb204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  000bb258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000364 	.word	0x08000364

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000364 	.word	0x08000364

08000204 <adc_init>:
#define EOC 	(1U<<1)

uint16_t *data;

void adc_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	//Enable clock access to port A
	RCC->AHB1ENR |= (1U<<0);
 8000208:	4b14      	ldr	r3, [pc, #80]	; (800025c <adc_init+0x58>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a13      	ldr	r2, [pc, #76]	; (800025c <adc_init+0x58>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
	//Set GPIO A to analog mode
	GPIOA->MODER |= (1U<<0);
 8000214:	4b12      	ldr	r3, [pc, #72]	; (8000260 <adc_init+0x5c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a11      	ldr	r2, [pc, #68]	; (8000260 <adc_init+0x5c>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<1);
 8000220:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <adc_init+0x5c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0e      	ldr	r2, [pc, #56]	; (8000260 <adc_init+0x5c>)
 8000226:	f043 0302 	orr.w	r3, r3, #2
 800022a:	6013      	str	r3, [r2, #0]
	//Enable clock access to ADC1
	RCC->APB2ENR |= (1U<<8);
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <adc_init+0x58>)
 800022e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000230:	4a0a      	ldr	r2, [pc, #40]	; (800025c <adc_init+0x58>)
 8000232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000236:	6453      	str	r3, [r2, #68]	; 0x44
	//Before we start we have to setup the sequencing in ADC
	//Note: suppose we have three different ADC modules connected to the stm32 board then if we want to first enable
	//the required sensor then we set the channel number in the configuration and we can set the order in which we can
	//use the ADC values
    ADC1->SQR3 |= (0U<<0);//FOR pa0 for pa1 we keep this value as 1
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <adc_init+0x60>)
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <adc_init+0x60>)
 800023c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800023e:	6353      	str	r3, [r2, #52]	; 0x34
    // THIS IS FOR THE SEQUENCE LENGTH
    ADC1->SQR1 = 0x00;
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <adc_init+0x60>)
 8000242:	2200      	movs	r2, #0
 8000244:	62da      	str	r2, [r3, #44]	; 0x2c
    //THIS FLAG ENABLES THE ADC conversion
    ADC1->CR2 |= ADC1_ON;
 8000246:	4b07      	ldr	r3, [pc, #28]	; (8000264 <adc_init+0x60>)
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	4a06      	ldr	r2, [pc, #24]	; (8000264 <adc_init+0x60>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6093      	str	r3, [r2, #8]
}
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	40023800 	.word	0x40023800
 8000260:	40020000 	.word	0x40020000
 8000264:	40012000 	.word	0x40012000

08000268 <start_conversion>:

void start_conversion(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0

	ADC1->CR2 |= SWSTART;
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <start_conversion+0x1c>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <start_conversion+0x1c>)
 8000272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000276:	6093      	str	r3, [r2, #8]

}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40012000 	.word	0x40012000

08000288 <adc_read>:

uint32_t adc_read(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0

while(!(ADC1->SR & EOC));
 800028c:	bf00      	nop
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <adc_read+0x20>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f003 0302 	and.w	r3, r3, #2
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0f9      	beq.n	800028e <adc_read+0x6>

return (ADC1->DR);
 800029a:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <adc_read+0x20>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

}
 800029e:	4618      	mov	r0, r3
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	40012000 	.word	0x40012000

080002ac <main>:
//The ADC readings are obtained from a GAS sensor
//The SDHC flash memory used here is based on SPI

uint32_t gas_sensor;
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	adc_init();
 80002b0:	f7ff ffa8 	bl	8000204 <adc_init>

	while(1)
	{
		start_conversion();
 80002b4:	f7ff ffd8 	bl	8000268 <start_conversion>
		gas_sensor = adc_read();
 80002b8:	f7ff ffe6 	bl	8000288 <adc_read>
 80002bc:	4603      	mov	r3, r0
 80002be:	4a01      	ldr	r2, [pc, #4]	; (80002c4 <main+0x18>)
 80002c0:	6013      	str	r3, [r2, #0]
		start_conversion();
 80002c2:	e7f7      	b.n	80002b4 <main+0x8>
 80002c4:	2000001c 	.word	0x2000001c

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f811 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ffd7 	bl	80002ac <main>

080002fe <LoopForever>:

LoopForever:
    b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000384 	.word	0x08000384
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	20000020 	.word	0x20000020

08000318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	4d0d      	ldr	r5, [pc, #52]	; (8000354 <__libc_init_array+0x38>)
 8000320:	4c0d      	ldr	r4, [pc, #52]	; (8000358 <__libc_init_array+0x3c>)
 8000322:	1b64      	subs	r4, r4, r5
 8000324:	10a4      	asrs	r4, r4, #2
 8000326:	2600      	movs	r6, #0
 8000328:	42a6      	cmp	r6, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	4d0b      	ldr	r5, [pc, #44]	; (800035c <__libc_init_array+0x40>)
 800032e:	4c0c      	ldr	r4, [pc, #48]	; (8000360 <__libc_init_array+0x44>)
 8000330:	f000 f818 	bl	8000364 <_init>
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	2600      	movs	r6, #0
 800033a:	42a6      	cmp	r6, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f855 3b04 	ldr.w	r3, [r5], #4
 8000344:	4798      	blx	r3
 8000346:	3601      	adds	r6, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f855 3b04 	ldr.w	r3, [r5], #4
 800034e:	4798      	blx	r3
 8000350:	3601      	adds	r6, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
